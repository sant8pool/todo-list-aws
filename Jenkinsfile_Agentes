pipeline {
    agent any

    environment {
       PATH = "${HOME}/.local/bin:${env.PATH}"  // Añadido el path de los binarios instalados con --user
       gitCredentialsId = 'acceso_mikel'
    }

    stages {
        stage('Get Code') {
            steps {
                git branch: 'develop', url: 'https://github.com/sant8pool/todo-list-aws.git', credentialsId: env.gitCredentialsId
                sh 'echo "PYTHONPATH is set to: $PYTHONPATH"'
                // Descargar el archivo samconfig.toml desde el otro repositorio
                sh '''
                wget https://raw.githubusercontent.com/sant8pool/todo-list-aws-config/staging/samconfig.toml -O samconfig.toml
                '''
                sh 'whoami'
                sh 'hostname'
            }
        }
        
        stage('Static Test') {
            agent { label 'agente-1' }
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        // Instalar flake8 y bandit
                        //sh 'pip install --user flake8 bandit'
                        // Ejecutar análisis estático
                        sh '''
                        flake8 --exit-zero --format=pylint src/ > flake8.out
                        bandit --exit-zero -r src/ -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        sh 'whoami'
                        sh 'hostname'
                    }
                }
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh 'sam build'
                        sh 'sam deploy --config-env staging --config-file samconfig.toml --resolve-s3'
        
                        // Obtener la API URL y depurar su valor
                        def apiUrl = sh(script: """
                            aws cloudformation describe-stacks --stack-name todo-list-aws-staging \
                            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayInvokeURL`].OutputValue' \
                            --output text
                        """, returnStdout: true).trim()
                        
        
                        // Imprimir la URL en la consola de Jenkins para verificar si se obtiene correctamente
                        echo "API Gateway URL: ${apiUrl}"
        
                        // Guardar la URL en un archivo
                        writeFile file: 'todoapitest_url.txt', text: apiUrl
        
                        // Asegurar que el archivo se "stash" para el siguiente stage
                        stash includes: 'todoapitest_url.txt', name: 'api_url'
                        
                        sh 'whoami'
                        sh 'hostname'
                    }        
                }
            }
        }
        
        stage('Test') {
            agent { label 'agente-2' }
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        // Descargar el archivo con la URL del entorno serverless
                        unstash 'api_url'
        
                        // Leer la URL y exportarla como variable de entorno
                        def apiUrl = readFile('todoapitest_url.txt').trim()
                        env.API_URL = apiUrl
        
                        // Mostrar el entorno actual
                        sh 'echo "Entorno actual:" && env'
        
                        // Ejecutar pruebas con Pytest (sin usar sustitución problemática en línea)
                        sh '''
                            export API_URL="${API_URL}"
                            python3 -m pytest --junitxml=report.xml test/integration/todoApiTest.py --api-url="$API_URL"
                        '''
        
                        // Publicar los resultados de las pruebas
                        junit 'report.xml'
                        
                        sh 'whoami'
                        sh 'hostname'
                    }    
                }
            }
        }
        
        stage('Promote') {
            steps {
                script {
                    // Obtener el código más reciente de la rama master
                    git branch: 'master', url: 'https://github.com/sant8pool/todo-list-aws.git', credentialsId: env.gitCredentialsId
        
                    // Hacer checkout de la rama master
                    sh 'git checkout master'
        
                    // Mergear la rama develop en master sin hacer commit
                    sh '''
                        git merge develop --no-commit --no-ff || true
                    '''
        
                    // Restaurar Jenkinsfile y Jenkinsfile_Agentes desde la rama master (para excluirlos del merge)
                    sh '''
                        git checkout origin/master -- Jenkinsfile Jenkinsfile_Agentes
                        git add Jenkinsfile Jenkinsfile_Agentes
                    '''
        
                    // Verificar si hay algún otro conflicto en los archivos y solucionarlo si es necesario
                    sh '''
                        if git diff --name-only --diff-filter=U; then
                            git diff --name-only --diff-filter=U
                        fi
                    '''
        
                    // Realizar commit y push de los cambios
                    withCredentials([usernamePassword(credentialsId: env.gitCredentialsId, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            git config --global user.name "Tu Nombre"
                            git config --global user.email "tu-correo@dominio.com"
                            git commit -m "Merge develop into master, exclude Jenkinsfile and Jenkinsfile_Agentes"
                            git push https://$GIT_USER:$GIT_PASSWORD@github.com/sant8pool/todo-list-aws.git master
                        '''
                    }    
                }
            }
        }
    }
    
    post {
        always {
            // limpiar
            cleanWs()
        }
    }
}
